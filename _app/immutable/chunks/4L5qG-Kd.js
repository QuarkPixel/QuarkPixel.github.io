import{t as i,b as p,a as o,e as as}from"./DxhDeRpN.js";import"./CtDyjDFw.js";import{f as k,s as t,i as y,c as h,n as a,x as fs,r as g,y as ts}from"./L7PHvVcx.js";import{h as os}from"./UU01uxmD.js";import{l as _s,a as ms}from"./Bkpx4_Zc.js";import{B as hs,P as u}from"./C1Pe7jKi.js";import{L as S}from"./BToRb2MX.js";import{e as gs,b as xs}from"./5yLR4a3_.js";import{H,C as x}from"./BjXvm1lq.js";import{A as v}from"./CwG9Y2Q0.js";import{H as es,U as L,a as m}from"./B1hu5TUc.js";import{H as ps}from"./C2gogavO.js";const ls={title:"Hsuan's Space 中用到的技术栈",description:"谈谈本站的开发历程",date:"2025-05-25T00:00:00.000Z",author:"Xuancong Meng",tags:["Web","Develop Diary"],layout:"blog"},{title:Xs,description:Zs,date:As,author:Bs,tags:Ks,layout:Rs}=ls;var Ps=i("正文部分使用 <!>。",1),bs=i("<li>Noto Serif SC Variable</li> <li>Noto Sans SC Variable</li> <li>Caveat Variable</li> <li>Gravitas One</li>",1),ws=i(`使用自己做的另外一款组件<!> ，这款组件的开发是在网页的开发过程中想到的灵感，就花了差不多一个下午的时间来实现。整体效果还是很惊艳的，用在了首页 Landing
的部分 😆。`,1),ys=i("<li>添加属性 <!>，具体属性说明参见<!></li> <li>动态计算图片展示大小，使得图片可以1:1像素展示在显示器上：</li>",1),Ss=i("页面内所有的跑马灯效果均使用 <!> 组件实现",1),Hs=i("使用 <!> 实现对 md 的渲染",1),Ls=i("项目使用 <!> 生成静态网站，通过 GitHub Pages 进行部署。得益于 Svelte 的优秀性能和静态站点生成的特性，网站具有：",1),zs=i("<li>快速的首屏加载</li> <li>优秀的 SEO 表现</li> <li>简单可靠的部署流程</li>",1),Ms=i("如果你对这个项目感兴趣，可以在 <!> 上查看源代码，项目代码采用 GPLv3 许可证开源。",1),Ns=i('<!> <img alt="Wakatime badage" src="https://wakatime.com/badge/user/018b19a3-343c-48f6-8ba9-5713e3a014cc/project/e4f1a103-1fe2-4a7b-afe8-35b4df2164b6.svg?style=flat-square"> <div class="text-xs opacity-65">Time in this web project over all time</div> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <button class="mt-20 mb-3 w-full flex justify-around gap-10 *:h-30 *:w-40"><!> <!> <!></button> <div align="center" class="mb-15 opacity-65 font-gravitas-one">↑ Hover Me ↑</div> <!> <pre class="language-typescript"><!></pre> <!> <!> <center><img src="/noise-texture.png" alt="noise-texture"> <div class="text-xs opacity-65">噪声纹理图</div></center> <!> <!> <pre class="language-typescript"><!></pre> <!> <!> <!> <!> <!> <!> <!> <!>',1);function Fs(rs,cs){const us=_s(cs,["children","$$slots","$$events","$$legacy"]);let f=fs(!0);hs(rs,ms(()=>us,ls,{children:(is,Cs)=>{var z=Ns(),M=k(z);u(M,{children:(n,e)=>{a();var s=p("关于「我要做一个关于自己的网页」这个 Flag 我已经立了若干年了，最近这段时间终于有动力来完成它。尝试了没有接触过的技术，花了近半个月的时间，完成了网页的搭建。");o(n,s)},$$slots:{default:!0}});var N=t(M,6);u(N,{children:(n,e)=>{a();var s=p("本站采用了现代化的 Web 开发技术栈，主要包括：SvelteKit、TailwindCSS、MDsveX 和 Skeleton UI.");o(n,s)},$$slots:{default:!0}});var C=t(N,2);H(C,{children:(n,e)=>{a();var s=p("1. 字体");o(n,s)},$$slots:{default:!0}});var D=t(C,2);u(D,{children:(n,e)=>{a();var s=Ps(),r=t(k(s));v(r,{href:"https://github.com/lxgw/LxgwWenKai",rel:"nofollow",children:(c,d)=>{a();var l=p("霞鹜文楷");o(c,l)},$$slots:{default:!0}}),a(),o(n,s)},$$slots:{default:!0}});var E=t(D,2);es(E,{children:(n,e)=>{a();var s=p("其余字体");o(n,s)},$$slots:{default:!0}});var G=t(E,2);L(G,{children:(n,e)=>{var s=bs();a(6),o(n,s)},$$slots:{default:!0}});var V=t(G,2);H(V,{children:(n,e)=>{a();var s=p("2. 动画");o(n,s)},$$slots:{default:!0}});var j=t(V,2);m(j,{children:(n,e)=>{a();var s=p("可变字体动画");o(n,s)},$$slots:{default:!0}});var O=t(j,2);u(O,{children:(n,e)=>{a();var s=ws(),r=t(k(s));v(r,{href:"https://github.com/QuarkPixel/svelte-text-animation",rel:"nofollow",children:(c,d)=>{x(c,{children:(l,w)=>{a();var $=p("svelte-text-animation");o(l,$)},$$slots:{default:!0}})},$$slots:{default:!0}}),a(),o(n,s)},$$slots:{default:!0}});var T=t(O,2);u(T,{children:(n,e)=>{a();var s=p("具体实现的细节其实很是很简单的，使用一个高斯函数叠加上一个边缘递减函数，就可以实现一个平滑的动画效果。");o(n,s)},$$slots:{default:!0}});var U=t(T,2);m(U,{children:(n,e)=>{a();var s=p("Logo 动画");o(n,s)},$$slots:{default:!0}});var W=t(U,2);u(W,{children:(n,e)=>{a();var s=p(`我尝试了市面上很多的 SVG 动画库，但是要么就是太过臃肿，要么就是实现的效果很奇怪，没法做到我要求的“点对点移动”的效果。于是我心一狠，直接手撕了一个SVG动画引擎。其实实际实现起来，没有想象的那么复杂。这也多亏了
Svelte 大量的内置函数，使用起来体验很不错。`);o(n,s)},$$slots:{default:!0}});var _=t(W,2),q=h(_);S(q,{get official(){return y(f)},easing:gs});var I=t(q,2);S(I,{get official(){return y(f)}});var ks=t(I,2);S(ks,{get official(){return y(f)},easing:xs}),g(_);var Q=t(_,4);es(Q,{children:(n,e)=>{a();var s=p("核心代码：");o(n,s)},$$slots:{default:!0}});var P=t(Q,2),ds=h(P);os(ds,()=>`<code class="language-typescript"><span class="token comment">// Derive interpolated path coordinates</span>
<span class="token keyword">let</span> interpolatedPaths<span class="token operator">:</span> Shape<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">$derived</span><span class="token punctuation">(</span>
	paths<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>path <span class="token operator">=></span>
		path<span class="token punctuation">.</span>initial<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">const</span> end <span class="token operator">=</span> path<span class="token punctuation">.</span>target<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">const</span> x <span class="token operator">=</span> start<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> start<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> path<span class="token punctuation">.</span>tween<span class="token punctuation">.</span>current<span class="token punctuation">;</span>
			<span class="token keyword">const</span> y <span class="token operator">=</span> start<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> start<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> path<span class="token punctuation">.</span>tween<span class="token punctuation">.</span>current<span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Derive SVG path d attributes</span>
<span class="token keyword">let</span> dValues<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">$derived</span><span class="token punctuation">(</span>
	interpolatedPaths<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>points <span class="token operator">=></span>
		<span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">M</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>points<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span> <span class="token operator">=></span> point<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">Z</span><span class="token template-punctuation string">&#96;</span></span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),g(P);var X=t(P,2);m(X,{children:(n,e)=>{a();var s=p("Header 的背景噪声图");o(n,s)},$$slots:{default:!0}});var Z=t(X,2);u(Z,{children:(n,e)=>{a();var s=p("具体实现是使用一张噪声纹理图");o(n,s)},$$slots:{default:!0}});var A=t(Z,4);ps(A,{children:(n,e)=>{a();var s=p("但由于不同屏幕尺寸可能会导致纹理图发糊。因此我做了这些工作：");o(n,s)},$$slots:{default:!0}});var B=t(A,2);L(B,{children:(n,e)=>{var s=ys(),r=k(s),c=t(h(r));x(c,{children:(l,w)=>{a();var $=p("image-rendering: pixelated;");o(l,$)},$$slots:{default:!0}});var d=t(c,2);v(d,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/image-rendering",rel:"nofollow",children:(l,w)=>{a();var $=p("MDN");o(l,$)},$$slots:{default:!0}}),g(r),a(2),o(n,s)},$$slots:{default:!0}});var b=t(B,2),$s=h(b);os($s,()=>`<code class="language-typescript"><span class="token keyword">function</span> <span class="token function">calcNoiseSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> dpr <span class="token operator">=</span> window<span class="token punctuation">.</span>devicePixelRatio <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>
	noiseTextureSize <span class="token operator">=</span> <span class="token constant">NOISE_TEXTURE_SIZE</span> <span class="token operator">/</span> dpr<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">calcNoiseSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">onMount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> calcNoiseSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> calcNoiseSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),g(b);var K=t(b,2);m(K,{children:(n,e)=>{a();var s=p("Marquee");o(n,s)},$$slots:{default:!0}});var R=t(K,2);u(R,{children:(n,e)=>{a();var s=Ss(),r=t(k(s));v(r,{href:"https://github.com/selemondev/svelte-marquee",rel:"nofollow",children:(c,d)=>{x(c,{children:(l,w)=>{a();var $=p("svelte-marquee");o(l,$)},$$slots:{default:!0}})},$$slots:{default:!0}}),a(),o(n,s)},$$slots:{default:!0}});var F=t(R,2);m(F,{children:(n,e)=>{a();var s=p("Markdown 渲染");o(n,s)},$$slots:{default:!0}});var J=t(F,2);u(J,{children:(n,e)=>{a();var s=Hs(),r=t(k(s));v(r,{href:"https://mdsvex.pngwn.io/",rel:"nofollow",children:(c,d)=>{a();var l=p("MDsvex");o(c,l)},$$slots:{default:!0}}),a(),o(n,s)},$$slots:{default:!0}});var Y=t(J,2);H(Y,{children:(n,e)=>{a();var s=p("部署和性能");o(n,s)},$$slots:{default:!0}});var ss=t(Y,2);u(ss,{children:(n,e)=>{a();var s=Ls(),r=t(k(s));x(r,{children:(c,d)=>{a();var l=p("@sveltejs/adapter-static");o(c,l)},$$slots:{default:!0}}),a(),o(n,s)},$$slots:{default:!0}});var ns=t(ss,2);L(ns,{children:(n,e)=>{var s=zs();a(4),o(n,s)},$$slots:{default:!0}});var vs=t(ns,2);ps(vs,{children:(n,e)=>{a();var s=Ms(),r=t(k(s));v(r,{href:"https://github.com/QuarkPixel/QuarkPixel.github.io",rel:"nofollow",children:(c,d)=>{a();var l=p("GitHub");o(c,l)},$$slots:{default:!0}}),a(),o(n,s)},$$slots:{default:!0}}),as("mouseenter",_,()=>ts(f,!1)),as("mouseleave",_,()=>ts(f,!0)),o(is,z)},$$slots:{default:!0}}))}export{Fs as default,ls as metadata};

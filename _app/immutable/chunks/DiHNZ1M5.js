import"./CWj6FrbW.js";import"./BBzrdw57.js";import{t as u,s as a,f as j,b as d,e as s,r as e,n as h}from"./DnzG3wrM.js";import{h as r}from"./vcs5vhYT.js";import{l as T,s as B}from"./BibeY9w6.js";import{B as S}from"./B3t1vhnF.js";import{B as x}from"./BK70ytud.js";import{I as E}from"./DREm_t4h.js";const c={title:"Tauri 太丝滑了",description:"记一次折腾的过程",date:"2025-10-03T05:24:40.000Z",author:"Xuancong Meng",tags:["Web","Technique","Rust"],layout:"blog"},{title:N,description:K,date:U,author:X,tags:Z,layout:F}=c;var C=u("<p>I always knew that the niche of Rust is a Scripting Language.</p>"),R=u(`<p>昨天尝试使用 <a href="https://tauri.app/" rel="nofollow">Tauri</a> 将网页构建成本地应用，使用体验很丝滑，很爽。</p> <h2 id="rust-的定位其实是脚本语言"><a class="anchor-link not-prose" href="#rust-的定位其实是脚本语言">“Rust 的定位其实是脚本语言”</a></h2> <p>标题的这句调侃出自于 <a href="https://x.com/tsoding/status/1969190491246731449" rel="nofollow">Tsoding 在推特上的回复</a>：</p> <!> <p>这句话其实是他在回应一条新闻<sup id="fnref-1"><a href="#fn-1" class="footnote-ref">1</a></sup>时说的。</p> <p>之所以会有这种调侃，是因为 Rust 写的各种命令行工具和小程序体验非常好，用起来甚至比传统的「脚本语言」还要顺手，于是就有了“Rust 其实是脚本语言”的说法。</p> <p>为什么文章一开头就提到这个呢？当然是因为 Tauri 也是用 Rust 写的啦。构建一个本地应用就像「把大象放到冰箱里」那么简单：</p> <ul><li>下载 Tauri</li> <li>把网页放到项目文件中</li> <li>编译</li></ul> <h2 id="软件开发是个草台班子"><a class="anchor-link not-prose" href="#软件开发是个草台班子">软件开发是个草台班子</a></h2> <p>事情的起因是<a href="https://quarkpixel.github.io/logs/0xB5B#%E5%85%BC%E8%81%8C" rel="nofollow">公司</a>发了个软件，内容就是各种的搭建图纸步骤，还是 3D 的，用作给学生演示就很方便。但由于软件在演示时会有其他公司的 Logo 水印，是不允许在上课时直接拿来给学生演示的。解决方案要么自己跟着步骤翻拍（对，就是每做一步用手机拍一张照），要么就直接背下来上课带着学生现场做。两种做法我感觉都太蛋疼了，于是想从软件本身入手。</p> <h3 id="所谓的3d-演示只是个-iframe"><a class="anchor-link not-prose" href="#所谓的3d-演示只是个-iframe">所谓的「3D 演示」只是个 <code>iframe</code></a></h3> <p>回想当时，我之所以这么直觉的下论断<sup id="fnref-2"><a href="#fn-2" class="footnote-ref">2</a></sup>可能是因为：除了这个演示界面，还有一个「播放视频」的界面，里面是直接放的 bilibili 的嵌入视频。但问题是，知道是个网页了，但因为软件已经打包好，根本没有什么调试的可行性，就打算从软件包下手。</p> <h3 id="软件本身就是个网页啊"><a class="anchor-link not-prose" href="#软件本身就是个网页啊">软件本身就是个网页啊！</a></h3> <p>打开文件所在的路径，看到了熟悉的文件：</p> <pre class="language-bash"><!></pre> <p><em>（没错，软件只有 Windows 版）</em></p> <p>通过瞪眼法可以很轻松地看出整个软件本身就是个浏览器套壳的软件，怪不得大小有 <code>140 MB</code> 。</p> <pre class="language-bash"><!></pre> <p><em>这里还可以看出软件本体是使用 <a href="https://www.cocos.com/en/creator" rel="nofollow">Cocos</a> 开发的</em></p> <h3 id="electron-真的只是纯套壳"><a class="anchor-link not-prose" href="#electron-真的只是纯套壳">Electron 真的只是「纯」套壳</a></h3> <p>发现了个 <code>index.html</code>，试着用 <a href="https://www.npmjs.com/package/http-server" rel="nofollow"><code>http-server</code></a> 打开，发现居然已经能完美运行了。这可能得益于 Cocos 本体和 Electron 模块相互独立，软件的开发也没有做更深层的整合优化。</p> <p>也就是说，我当时专门为这个软件下载了个 Windows 虚拟机其实是完全没有必要的！我完全可以通过上述的这些操作在自己的 macOS 上运行这个所谓的软件。</p> <h3 id="总算可以拿到-iframe-的链接了"><a class="anchor-link not-prose" href="#总算可以拿到-iframe-的链接了">总算可以拿到 <code>iframe</code> 的链接了</a></h3> <p>在本地部署，浏览器中打开后应该就可以调试网页了。事实上也确实如此，轻松的获得了对应的「3D 演示」的链接地址。</p> <h2 id="去除水印"><a class="anchor-link not-prose" href="#去除水印">去除水印</a></h2> <p>调试网页，发现只要设置 <code>body &#123;background-image: none !important;&#125;</code> 水印就可以轻松消失。</p> <p>实现这一点其实也很轻松，例如使用各种「自定义 CSS」插件即可。我使用 <a href="https://arc.net/" rel="nofollow">Arc</a> 浏览器有一个 <a href="https://resources.arc.net/hc/en-us/articles/19212718608151-Boosts-Customize-Any-Website" rel="nofollow">Boosts</a> 功能，相当于浏览器内置了自定义功能（体验还蛮不错的），因此修改起来也非常方便。</p> <p><!> <em>来源：Arc</em></p> <p>这下可以在上课时直接用演示软件了☺️ 也就是说，在每次上课前，把对应的网址存下来，用时再打开就可以了。</p> <h2 id="我就是爱折腾"><a class="anchor-link not-prose" href="#我就是爱折腾">我就是爱折腾</a></h2> <p>这就够了么？还是太麻烦了！</p> <p>我每次需要一个网址都需要先进到对应目录、再启动 <code>http-server</code>、打开对应的网站、登陆、进入对应模型、打开开发者面板、找到 <code>iframe</code> 元素、复制对应的 <code>src</code> 属性才可以。</p> <h3 id="tauri-助我"><a class="anchor-link not-prose" href="#tauri-助我">Tauri 助我！</a></h3> <p>终于回收标题了。</p> <p>我创建了一个 Tauri 项目，并且将 <code>./resources/app</code> 目录下的所有文件先一股脑塞进去，想着再根据报错进行修改。</p> <center style="font-size: x-large; font-weight: bold">但是尽然直接跑起来了！！</center> <p>那一刻太震惊了，我没想过会如此顺利。现在解决了每次启动的一系列繁琐步骤，像一个正常 app 启动它即可。但是获取 <code>src</code> 还是太麻烦了。</p> <h3 id="更方便的获取-iframe-链接"><a class="anchor-link not-prose" href="#更方便的获取-iframe-链接">更方便的获取 <code>iframe</code> 链接</a></h3> <p>我打算对源代码动手。由于都是编译过的代码，所以根本没有可读性。我直接在全文中搜索 <code>iframe</code>，好在只有一处有相关代码。</p> <p>代码大致如下：</p> <pre class="language-javascript"><!></pre> <p>其实很明显了，这里的 <code>t</code> 就是我们所想要的链接。为了把网址展示出来，尝试了几种方案：</p> <ul><li><code>console.log(t)</code> ：还是要打开控制台，不方便。而且 Tauri 不加参数编译后是不会附带控制台的</li> <li><code>alert(t)</code> ：Tauri 的程序里 <code>alert</code> 是直接不起作用的</li> <li>官方屏蔽了 <code>alert</code>，但是提供了一个系统级的插件 <code>notification</code> 。但由于我目前的代码是编译后的纯 js，相当于强兼源代码了，无法使用外部的功能。</li></ul> <p>最后我使用的方案是 <code>navigator.clipboard.writeText(t)</code> 。现在看来反而最符合直觉。每当创建一个 <code>iframe</code> ，即打开一个「3D 演示」/「视频」，就会自动将对应的链接拷贝至剪贴板。这时我只用在浏览器中粘贴即可。</p> <h3 id="收尾"><a class="anchor-link not-prose" href="#收尾">收尾</a></h3> <p>因此，现在的流程被简化为了：</p> <ul><li>打开自己编译的软件</li> <li>打开对应模型</li> <li>在需要的地方粘贴
效率被极大提高了。</li></ul> <h4 id="编译"><a class="anchor-link not-prose" href="#编译">编译</a></h4> <p>值得注意的是，自己的这次再编译得到了很多好的副作用：</p> <ol><li><strong>软件体积的缩小</strong> 现在新版的软件由于 Tauri 的特性，只有 <code>13 MB</code> ，舒服的很</li> <li><strong>不用再开虚拟机来使用软件了</strong> 这次直接将软件打包成了 macOS 的版本，再也不用开一个虚拟机只为了运行一个网页套壳应用了🤓 此外，我还交叉编译了一份 Windows 版本，备用。</li></ol> <h2 id="尾记"><a class="anchor-link not-prose" href="#尾记">尾记</a></h2> <p>这次整体的开发都非常丝滑，没有遇到什么大坑。是一次很不错的体验。不得不感慨「Web 是一项伟大的技术」以及「『计算机』真是一门在各行业都能吃香的技能」。</p> <div class="footnotes"><hr> <ol><li id="fn-1">原文可以上推特进行查看，主要是想说 git v3.0 将完全用 Rust 替换 Perl。但我对这则新闻的真实性存疑，因为我没有查到很多相关信息。<a href="#fnref-1" class="footnote-backref">↩</a></li> <li id="fn-2">自己这方面的直觉一向很准，准得出奇。可能我天生就是学计算机的料吧 🤓<a href="#fnref-2" class="footnote-backref">↩</a></li></ol></div>`,1);function L(f,m){const k=T(m,["children","$$slots","$$events","$$legacy"]);S(f,B(()=>k,c,{children:(g,W)=>{var p=R(),l=a(j(p),6);x(l,{children:(y,I)=>{var $=C();d(y,$)},$$slots:{default:!0}});var o=a(l,22),_=s(o);r(_,()=>`<code class="language-bash">➜ <span class="token builtin class-name">.</span> <span class="token function">ls</span>
chrome_100_percent.pak  libEGL.dll              resources
chrome_200_percent.pak  libGLESv2.dll           resources.pak
d3dcompiler_47.dll      LICENSE                 snapshot_blob.bin
ffmpeg.dll              LICENSES.chromium.html  swiftshader
icudtl.dat              locales                 v8_context_snapshot.bin
KuBit.exe               natives_blob.bin        version</code>`),e(o);var n=a(o,6),b=s(n);r(b,()=>`<code class="language-bash">➜ <span class="token builtin class-name">.</span> <span class="token builtin class-name">cd</span> resources/app
➜ ./resources/app <span class="token function">ls</span>
app.ico                 main.js                 src
assets                  node_modules            style-desktop.dfd76.css
cocos2d-js-min.f7db5.js pack.bat                style-mobile.6e9cd.css
favicon.8de18.ico       package-lock.json       unpack.json
fileconfig.json         package.json            version.json
index.html              run.bat
main.6f18c.js           splash.85cfd.png</code>`),e(n);var t=a(n,20),v=s(t);E(v,{src:"https://resources.arc.net/hc/article_attachments/25703394042263",alt:"create-a-Boost-in-Arc-for-macOS"}),h(2),e(t);var i=a(t,26),w=s(i);r(w,()=>`<code class="language-javascript"><span class="token function-variable function">loadURL</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_iframe<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		e<span class="token punctuation">.</span>src <span class="token operator">=</span> t<span class="token punctuation">;</span>
		……
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`),e(i),h(24),d(g,p)},$$slots:{default:!0}}))}const H=Object.freeze(Object.defineProperty({__proto__:null,default:L,metadata:c},Symbol.toStringTag,{value:"Module"}));export{H as _};

import"./CWj6FrbW.js";import"./BBzrdw57.js";import{t as os,s as n,f as ls,e as s,b as cs,r as a,n as p}from"./DnzG3wrM.js";import{h as t}from"./vcs5vhYT.js";import{l as is,s as rs}from"./BibeY9w6.js";import{B as ms}from"./DoZ4_2u6.js";import{I as hs}from"./DREm_t4h.js";const L={title:"TextAnimation 的实现细节",description:"深入解析 svelte-text-animation 组件的技术实现与最新优化",date:"2025-07-21T12:44:11.000Z",author:"Xuancong Meng",tags:["Technique","Web"],layout:"blog"},{title:_s,description:Ms,date:Ls,author:zs,tags:$s,layout:Ps}=L;var us=os('<p>在<a href="./250525-tech-stack-in-hsuans-space">之前的文章</a>中，我简单提到了自己开发的 <a href="https://github.com/QuarkPixel/svelte-text-animation" rel="nofollow"><code>svelte-text-animation</code></a> 组件。这个组件最初是为了本站首页 Landing 部分的文字动画效果而设计的，后来觉得特别好用就抽象成了一个独立的组件。最近对组件进行了一些优化更新，借此机会来详细介绍一下这个库的实现细节。</p> <h2 id="核心设计思路"><a class="anchor-link not-prose" href="#核心设计思路">核心设计思路</a></h2> <h3 id="基本原理"><a class="anchor-link not-prose" href="#基本原理">基本原理</a></h3> <p>整个动画的核心思想非常简洁：<strong>使用高斯函数叠加边缘递减函数</strong>，为文本中的每个字符计算一个效果强度值，然后通过回调函数将这个强度转换为具体的样式。</p> <p><!></p> <h3 id="数学模型"><a class="anchor-link not-prose" href="#数学模型">数学模型</a></h3> <p>动画效果由两个关键函数组成：</p> <ol><li><strong>高斯函数</strong>：控制效果在文本中的空间分布</li> <li><strong>边缘递减函数</strong>：确保动画在起始和结束时平滑过渡</li></ol> <h2 id="最新优化更平缓的边缘递减函数"><a class="anchor-link not-prose" href="#最新优化更平缓的边缘递减函数">最新优化：更平缓的边缘递减函数</a></h2> <h3 id="原有实现的局限性"><a class="anchor-link not-prose" href="#原有实现的局限性">原有实现的局限性</a></h3> <p>在之前的版本中，边缘递减函数使用的是简单的二次函数：</p> <div class="math math-display"><!></div> <p>其中 <span class="math math-inline"><!></span> 表示动画进度（progress）。这个函数确实能够满足边界条件：在 <span class="math math-inline"><!></span> 和 <span class="math math-inline"><!></span> 时函数值为 0，在 <span class="math math-inline"><!></span> 时达到最大值 <span class="math math-inline"><!></span>，实现了平滑过渡的目标。</p> <p>然而，这种实现存在一个显著问题：<strong>动画效果仅在进度接近 0.5 时才能完全展现，其他位置的效果都会被显著削弱</strong>。这意味着动画的大部分时间里，文字效果都无法达到理想状态。</p> <h3 id="新的数学方案"><a class="anchor-link not-prose" href="#新的数学方案">新的数学方案</a></h3> <p>经过深入思考和数学推导，我设计了一个更高阶的多项式函数：</p> <div class="math math-display"><!></div> <p>其中 <span class="math math-inline"><!></span> 对应新增的 <code>edgeFlatness</code> 参数（默认值为 5），用于控制函数的平缓程度。</p> <p>这个改进后的函数具有以下优秀特性：</p> <ul><li><strong>保持边界条件</strong>：当 <span class="math math-inline"><!></span> 或 <span class="math math-inline"><!></span> 时，函数值依然为 <span class="math math-inline"><!></span></li> <li><strong>峰值位置不变</strong>：在 <span class="math math-inline"><!></span> 时函数值仍为 <span class="math math-inline"><!></span></li> <li><strong>中间区域显著改善</strong>：通过调整 <span class="math math-inline"><!></span> 参数，可以让更大范围内的进度值都接近最大效果强度</li></ul> <h3 id="函数特性分析"><a class="anchor-link not-prose" href="#函数特性分析">函数特性分析</a></h3> <p>通过数学分析可以发现，当 <span class="math math-inline"><!></span> 时，新函数退化为原有的二次函数。而当 <span class="math math-inline"><!></span> 时，函数变为 <span class="math math-inline"><!></span> 次多项式，相当于在原有基础上增加了一个可调节的平缓度参数。</p> <center><img class="outline outline-[#26796D] outline-3 w-[50%]" src="/img/250721-0.gif" alt="edgeFactor 函数演示" data-libra=""> <em>不同 flatness 值下的边缘递减函数对比</em></center> <p>从图中可以直观看出，随着 <code>flatness</code> 参数的增大，函数在中间区域变得更加平缓，这意味着动画效果在更大的进度范围内都能保持接近最大强度，显著提升了整体的视觉表现。</p> <h2 id="核心实现解析"><a class="anchor-link not-prose" href="#核心实现解析">核心实现解析</a></h2> <h3 id="效果强度数组生成算法"><a class="anchor-link not-prose" href="#效果强度数组生成算法">效果强度数组生成算法</a></h3> <pre class="language-typescript"><!></pre> <h3 id="关键优化策略"><a class="anchor-link not-prose" href="#关键优化策略">关键优化策略</a></h3> <ol><li><strong>早期返回优化</strong>：当边缘因子小于等于 0 时，直接返回零数组，避免后续无意义的计算</li> <li><strong>智能范围限制</strong>：仅对可能产生显著效果的字符范围进行计算，大幅降低计算复杂度</li> <li><strong>高斯函数截断</strong>：利用指数函数的快速衰减特性，当距离过远时直接跳过计算</li></ol> <h2 id="api-设计"><a class="anchor-link not-prose" href="#api-设计">API 设计</a></h2> <h3 id="核心参数接口"><a class="anchor-link not-prose" href="#核心参数接口">核心参数接口</a></h3> <pre class="language-typescript"><!></pre> <h3 id="实际使用示例"><a class="anchor-link not-prose" href="#实际使用示例">实际使用示例</a></h3> <pre class="language-svelte"><!></pre> <p>你可以在 <a href="https://svelte.dev/playground/434018293cfb415b925f19b47ef4a85c?version=5.33.1" rel="nofollow">Svelte Playground</a> 中直接体验这个组件的效果。</p> <p>实际应用场景可以参考本博客首页的 Landing 部分，对应的源码实现：<a href="https://github.com/QuarkPixel/QuarkPixel.github.io/blob/master/src/routes/Landing.svelte" rel="nofollow">Landing.svelte</a>。</p> <hr> <h2 id="总结"><a class="anchor-link not-prose" href="#总结">总结</a></h2> <p><code>svelte-text-animation</code> 通过精心设计的数学函数组合，实现了既平滑又视觉效果出色的文字动画。最新版本中边缘递减函数的优化，通过引入可调节的平缓度参数，显著提升了动画在整个进度范围内的表现效果。</p> <p>这种基于数学模型的设计方法不仅保证了动画的流畅性，还为开发者提供了充分的自定义空间。如果你对这个组件感兴趣，欢迎在 <a href="https://github.com/QuarkPixel/svelte-text-animation" rel="nofollow">GitHub</a> 上为项目点个 Star 😆</p>',1);function ks(T,q){const C=is(q,["children","$$slots","$$events","$$legacy"]);ms(T,rs(()=>C,L,{children:(B,gs)=>{var z=us(),e=n(ls(z),8),D=s(e);hs(D,{src:"https://raw.githubusercontent.com/QuarkPixel/svelte-text-animation/master/assets/example.gif",alt:"Demo"}),a(e);var o=n(e,14),H=s(o);t(H,()=>'<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>f</mi><mtext>old</mtext></msub><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><mn>4</mn><mi>p</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f_{\\text{old}}(p) = 4p(1 - p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">old</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">4</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></span>'),a(o);var l=n(o,2),c=n(s(l)),O=s(c);t(O,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span>'),a(c);var i=n(c,2),W=s(i);t(W,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">p = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>'),a(i);var r=n(i,2),E=s(r);t(E,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">p = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>'),a(r);var m=n(r,2),G=s(m);t(G,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>=</mo><mn>0.5</mn></mrow><annotation encoding="application/x-tex">p = 0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.5</span></span></span></span>'),a(m);var $=n(m,2),N=s($);t(N,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>'),a($),p(),a(l);var h=n(l,8),X=s(h);t(X,()=>'<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>f</mi><mtext>new</mtext></msub><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mo>−</mo><mo stretchy="false">(</mo><mn>2</mn><mi>p</mi><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mrow><mn>2</mn><mi>n</mi></mrow></msup></mrow><annotation encoding="application/x-tex">f_{\\text{new}}(p) = 1 - (2p - 1)^{2n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">new</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></span></span>'),a(h);var u=n(h,2),P=n(s(u)),Z=s(P);t(Z,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>'),a(P),p(3),a(u);var k=n(u,4),g=s(k),d=n(s(g),2),J=s(d);t(J,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">p = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>'),a(d);var x=n(d,2),K=s(x);t(K,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">p = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>'),a(x);var S=n(x,2),R=s(S);t(R,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>'),a(S),a(g);var w=n(g,2),y=n(s(w),2),U=s(y);t(U,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>=</mo><mn>0.5</mn></mrow><annotation encoding="application/x-tex">p = 0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.5</span></span></span></span>'),a(y);var F=n(y,2),V=s(F);t(V,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>'),a(F),a(w);var I=n(w,2),j=n(s(I),2),Y=s(j);t(Y,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>'),a(j),p(),a(I),a(k);var v=n(k,4),b=n(s(v)),ss=s(b);t(ss,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>'),a(b);var f=n(b,2),as=s(f);t(as,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n &gt; 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>'),a(f);var A=n(f,2),ns=s(A);t(ns,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>n</mi></mrow><annotation encoding="application/x-tex">2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span></span></span></span>'),a(A),p(),a(v);var _=n(v,10),ts=s(_);t(ts,()=>`<code class="language-typescript"><span class="token keyword">function</span> <span class="token function">generateEffectArray</span><span class="token punctuation">(</span>
	length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
	progress<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
	spread<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
	flatness<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// 计算边缘递减因子</span>
	<span class="token keyword">const</span> edgeFactor <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> progress <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> flatness<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 早期返回优化：当边缘因子为负时直接返回零数组</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>edgeFactor <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> result<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// 计算当前动画焦点在文本中的位置</span>
	<span class="token keyword">const</span> offset <span class="token operator">=</span> progress <span class="token operator">*</span> <span class="token punctuation">(</span>length <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> spread <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> spread <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

	<span class="token comment">// 优化计算范围，避免不必要的高斯函数计算</span>
	<span class="token keyword">const</span> startIdx <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>offset <span class="token operator">-</span> spread <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> endIdx <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>offset <span class="token operator">+</span> spread <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> startIdx<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> endIdx<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">const</span> z <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> offset<span class="token punctuation">)</span> <span class="token operator">/</span> spread<span class="token punctuation">;</span>
		<span class="token keyword">const</span> zSquared <span class="token operator">=</span> z <span class="token operator">*</span> z<span class="token punctuation">;</span>

		<span class="token comment">// 性能优化：当 z² > 9 时，e^(-z²) &lt; 0.01，可以忽略</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>zSquared <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>zSquared<span class="token punctuation">)</span> <span class="token operator">*</span> edgeFactor<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`),a(_);var M=n(_,10),ps=s(M);t(ps,()=>`<code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">&#123;</span>
	text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>                                 <span class="token comment">// 要进行动画的文本内容</span>
	progress<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>                             <span class="token comment">// 动画进度，取值范围 [0, 1]</span>
	spread<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>                              <span class="token comment">// 效果扩散半径，默认 3</span>
	edgeFlatness<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>                        <span class="token comment">// 边缘平缓度，默认 5</span>
	<span class="token function-variable function">styleCallback</span><span class="token operator">:</span> <span class="token punctuation">(</span>intensity<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 强度到样式的转换函数</span>
	innerClassName<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>                      <span class="token comment">// 字符容器的 CSS 类名</span>
<span class="token punctuation">&#125;</span></code>`),a(M);var Q=n(M,4),es=s(Q);t(es,()=>`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextAnimation</span>
    <span class="token attr-name">text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Hello, World!<span class="token punctuation">"</span></span>
    <span class="token language-javascript"><span class="token punctuation">&#123;</span>progress<span class="token punctuation">&#125;</span></span>
    <span class="token attr-name">spread=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">&#125;</span></span>
    <span class="token attr-name">edgeFlatness=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token number">6</span><span class="token punctuation">&#125;</span></span>
    <span class="token attr-name">styleCallback=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">intensity</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">
        transform: scale(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token number">1</span> <span class="token operator">+</span> intensity <span class="token operator">*</span> <span class="token number">0.5</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">);
        color: rgb(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token number">255</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">*</span> intensity<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">*</span> intensity<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">);
    </span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">&#125;</span></span>
<span class="token punctuation">/></span></span></code>`),a(Q),p(12),cs(B,z)},$$slots:{default:!0}}))}const Ss=Object.freeze(Object.defineProperty({__proto__:null,default:ks,metadata:L},Symbol.toStringTag,{value:"Module"}));export{Ss as _};

import{t as d,b as e,a as o}from"./DwMy3HL2.js";import"./D6IV2p6u.js";import{w as k,s as t,h as y,c as g,n as a,x as _s,r as x,y as ts}from"./BL_z2TtU.js";import{e as os}from"./DKsSL8ew.js";import{h as es}from"./DtzNp2vG.js";import{l as hs,a as ms}from"./C-atNzZN.js";import{B as gs,P as i}from"./CcQs-kKy.js";import{L as S}from"./Bj0P1uwf.js";import{e as xs,b as Ps}from"./DFxP9C7-.js";import{H}from"./BoEMHOna.js";import{A as $}from"./4fmcVcRI.js";import{H as ps,U as z,a as m}from"./BAnK8Fl1.js";import{C as P}from"./-rBcwxDm.js";import{H as ls}from"./CZhsDrgq.js";const rs={title:"Hsuan's Space 中用到的技术栈",description:"谈谈本站的开发历程",date:"2025-05-25T00:00:00.000Z",author:"Xuancong Meng",tags:["Web","Develop Diary"],layout:"blog"},{title:Ks,description:Rs,date:Fs,author:Js,tags:Ys,layout:sn}=rs;var bs=d("正文部分使用 <!>。",1),ws=d("<li>Noto Serif SC Variable</li> <li>Noto Sans SC Variable</li> <li>Caveat Variable</li> <li>Gravitas One</li>",1),ys=d("值得注意的是，本网站使用了<!>技术，由<!>支持。因此在初次访问网站时，字体会有很独特的加载顺序。",1),Ss=d(`使用自己做的另外一款组件<!> ，这款组件的开发是在网页的开发过程中想到的灵感，就花了差不多一个下午的时间来实现。整体效果还是很惊艳的，用在了首页 Landing
的部分 😆。`,1),Hs=d("<li>添加属性 <!>，具体属性说明参见<!></li> <li>动态计算图片展示大小，使得图片可以1:1像素展示在显示器上：</li>",1),zs=d("页面内所有的跑马灯效果均使用 <!> 组件实现",1),Ls=d("使用 <!> 实现对 md 的渲染",1),Ms=d("项目使用 <!> 生成静态网站，通过 GitHub Pages 进行部署。得益于 Svelte 的优秀性能和静态站点生成的特性，网站具有：",1),Ns=d("<li>快速的首屏加载</li> <li>优秀的 SEO 表现</li> <li>简单可靠的部署流程</li>",1),Cs=d("如果你对这个项目感兴趣，可以在 <!> 上查看源代码，项目代码采用 GPLv3 许可证开源。",1),Ds=d('<!> <img alt="Wakatime badage" src="https://wakatime.com/badge/user/018b19a3-343c-48f6-8ba9-5713e3a014cc/project/e4f1a103-1fe2-4a7b-afe8-35b4df2164b6.svg?style=flat-square"> <div class="text-xs opacity-65">Time in this web project over all time</div> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <button class="mt-20 mb-3 w-full flex justify-around gap-10 *:h-30 *:w-40"><!> <!> <!></button> <div align="center" class="mb-15 opacity-65 font-gravitas-one">↑ Hover Me ↑</div> <!> <pre class="language-typescript"><!></pre> <!> <!> <center><img src="/noise-texture.png" alt="noise-texture"> <div class="text-xs opacity-65">噪声纹理图</div></center> <!> <!> <pre class="language-typescript"><!></pre> <!> <!> <!> <!> <!> <!> <!> <!>',1);function nn(cs,us){const is=hs(us,["children","$$slots","$$events","$$legacy"]);let _=_s(!0);gs(cs,ms(()=>is,rs,{children:(ds,Es)=>{var L=Ds(),M=k(L);i(M,{children:(n,p)=>{a();var s=e("关于「我要做一个关于自己的网页」这个 Flag 我已经立了若干年了，最近这段时间终于有动力来完成它。尝试了没有接触过的技术，花了近半个月的时间，完成了网页的搭建。");o(n,s)},$$slots:{default:!0}});var N=t(M,6);i(N,{children:(n,p)=>{a();var s=e("本站采用了现代化的 Web 开发技术栈，主要包括：SvelteKit、TailwindCSS、MDsveX 和 Skeleton UI.");o(n,s)},$$slots:{default:!0}});var C=t(N,2);H(C,{children:(n,p)=>{a();var s=e("1. 字体");o(n,s)},$$slots:{default:!0}});var D=t(C,2);i(D,{children:(n,p)=>{a();var s=bs(),l=t(k(s));$(l,{href:"https://github.com/lxgw/LxgwWenKai",rel:"nofollow",children:(c,u)=>{a();var r=e("霞鹜文楷");o(c,r)},$$slots:{default:!0}}),a(),o(n,s)},$$slots:{default:!0}});var E=t(D,2);ps(E,{children:(n,p)=>{a();var s=e("其余字体");o(n,s)},$$slots:{default:!0}});var G=t(E,2);z(G,{children:(n,p)=>{var s=ws();a(6),o(n,s)},$$slots:{default:!0}});var V=t(G,2);i(V,{children:(n,p)=>{a();var s=ys(),l=t(k(s));$(l,{href:"https://chinese-font.netlify.app/zh-cn/online-split/",rel:"nofollow",children:(u,r)=>{a();var v=e("字体分包");o(u,v)},$$slots:{default:!0}});var c=t(l,2);$(c,{href:"https://chinese-font.netlify.app/zh-cn/",rel:"nofollow",children:(u,r)=>{a();var v=e("中文网字计划");o(u,v)},$$slots:{default:!0}}),a(),o(n,s)},$$slots:{default:!0}});var j=t(V,2);H(j,{children:(n,p)=>{a();var s=e("2. 动画");o(n,s)},$$slots:{default:!0}});var O=t(j,2);m(O,{children:(n,p)=>{a();var s=e("可变字体动画");o(n,s)},$$slots:{default:!0}});var T=t(O,2);i(T,{children:(n,p)=>{a();var s=Ss(),l=t(k(s));$(l,{href:"https://github.com/QuarkPixel/svelte-text-animation",rel:"nofollow",children:(c,u)=>{P(c,{children:(r,v)=>{a();var f=e("svelte-text-animation");o(r,f)},$$slots:{default:!0}})},$$slots:{default:!0}}),a(),o(n,s)},$$slots:{default:!0}});var U=t(T,2);i(U,{children:(n,p)=>{a();var s=e("具体实现的细节其实很是很简单的，使用一个高斯函数叠加上一个边缘递减函数，就可以实现一个平滑的动画效果。");o(n,s)},$$slots:{default:!0}});var W=t(U,2);m(W,{children:(n,p)=>{a();var s=e("Logo 动画");o(n,s)},$$slots:{default:!0}});var q=t(W,2);i(q,{children:(n,p)=>{a();var s=e(`我尝试了市面上很多的 SVG 动画库，但是要么就是太过臃肿，要么就是实现的效果很奇怪，没法做到我要求的“点对点移动”的效果。于是我心一狠，直接手撕了一个SVG动画引擎。其实实际实现起来，没有想象的那么复杂。这也多亏了
Svelte 大量的内置函数，使用起来体验很不错。`);o(n,s)},$$slots:{default:!0}});var h=t(q,2),I=g(h);S(I,{get official(){return y(_)},easing:xs});var Q=t(I,2);S(Q,{get official(){return y(_)}});var ks=t(Q,2);S(ks,{get official(){return y(_)},easing:Ps}),x(h);var X=t(h,4);ps(X,{children:(n,p)=>{a();var s=e("核心代码：");o(n,s)},$$slots:{default:!0}});var b=t(X,2),$s=g(b);es($s,()=>`<code class="language-typescript"><span class="token comment">// Derive interpolated path coordinates</span>
<span class="token keyword">let</span> interpolatedPaths<span class="token operator">:</span> Shape<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">$derived</span><span class="token punctuation">(</span>
	paths<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>path <span class="token operator">=></span>
		path<span class="token punctuation">.</span>initial<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">const</span> end <span class="token operator">=</span> path<span class="token punctuation">.</span>target<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">const</span> x <span class="token operator">=</span> start<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> start<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> path<span class="token punctuation">.</span>tween<span class="token punctuation">.</span>current<span class="token punctuation">;</span>
			<span class="token keyword">const</span> y <span class="token operator">=</span> start<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> start<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> path<span class="token punctuation">.</span>tween<span class="token punctuation">.</span>current<span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Derive SVG path d attributes</span>
<span class="token keyword">let</span> dValues<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">$derived</span><span class="token punctuation">(</span>
	interpolatedPaths<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>points <span class="token operator">=></span>
		<span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">M</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>points<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span> <span class="token operator">=></span> point<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">Z</span><span class="token template-punctuation string">&#96;</span></span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),x(b);var Z=t(b,2);m(Z,{children:(n,p)=>{a();var s=e("Header 的背景噪声图");o(n,s)},$$slots:{default:!0}});var A=t(Z,2);i(A,{children:(n,p)=>{a();var s=e("具体实现是使用一张噪声纹理图");o(n,s)},$$slots:{default:!0}});var B=t(A,4);ls(B,{children:(n,p)=>{a();var s=e("但由于不同屏幕尺寸可能会导致纹理图发糊。因此我做了这些工作：");o(n,s)},$$slots:{default:!0}});var K=t(B,2);z(K,{children:(n,p)=>{var s=Hs(),l=k(s),c=t(g(l));P(c,{children:(r,v)=>{a();var f=e("image-rendering: pixelated;");o(r,f)},$$slots:{default:!0}});var u=t(c,2);$(u,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/image-rendering",rel:"nofollow",children:(r,v)=>{a();var f=e("MDN");o(r,f)},$$slots:{default:!0}}),x(l),a(2),o(n,s)},$$slots:{default:!0}});var w=t(K,2),vs=g(w);es(vs,()=>`<code class="language-typescript"><span class="token keyword">function</span> <span class="token function">calcNoiseSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> dpr <span class="token operator">=</span> window<span class="token punctuation">.</span>devicePixelRatio <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>
	noiseTextureSize <span class="token operator">=</span> <span class="token constant">NOISE_TEXTURE_SIZE</span> <span class="token operator">/</span> dpr<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">calcNoiseSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">onMount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> calcNoiseSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> calcNoiseSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),x(w);var R=t(w,2);m(R,{children:(n,p)=>{a();var s=e("Marquee");o(n,s)},$$slots:{default:!0}});var F=t(R,2);i(F,{children:(n,p)=>{a();var s=zs(),l=t(k(s));$(l,{href:"https://github.com/selemondev/svelte-marquee",rel:"nofollow",children:(c,u)=>{P(c,{children:(r,v)=>{a();var f=e("svelte-marquee");o(r,f)},$$slots:{default:!0}})},$$slots:{default:!0}}),a(),o(n,s)},$$slots:{default:!0}});var J=t(F,2);m(J,{children:(n,p)=>{a();var s=e("Markdown 渲染");o(n,s)},$$slots:{default:!0}});var Y=t(J,2);i(Y,{children:(n,p)=>{a();var s=Ls(),l=t(k(s));$(l,{href:"https://mdsvex.pngwn.io/",rel:"nofollow",children:(c,u)=>{a();var r=e("MDsvex");o(c,r)},$$slots:{default:!0}}),a(),o(n,s)},$$slots:{default:!0}});var ss=t(Y,2);H(ss,{children:(n,p)=>{a();var s=e("部署和性能");o(n,s)},$$slots:{default:!0}});var ns=t(ss,2);i(ns,{children:(n,p)=>{a();var s=Ms(),l=t(k(s));P(l,{children:(c,u)=>{a();var r=e("@sveltejs/adapter-static");o(c,r)},$$slots:{default:!0}}),a(),o(n,s)},$$slots:{default:!0}});var as=t(ns,2);z(as,{children:(n,p)=>{var s=Ns();a(4),o(n,s)},$$slots:{default:!0}});var fs=t(as,2);ls(fs,{children:(n,p)=>{a();var s=Cs(),l=t(k(s));$(l,{href:"https://github.com/QuarkPixel/QuarkPixel.github.io",rel:"nofollow",children:(c,u)=>{a();var r=e("GitHub");o(c,r)},$$slots:{default:!0}}),a(),o(n,s)},$$slots:{default:!0}}),os("mouseenter",h,()=>ts(_,!1)),os("mouseleave",h,()=>ts(_,!0)),o(ds,L)},$$slots:{default:!0}}))}export{nn as default,rs as metadata};

import"./CWj6FrbW.js";import"./BBzrdw57.js";import{t as z,s as n,f as M,e as t,l as c,b as P,n as h,r as p,A as L,B as f}from"./DnzG3wrM.js";import{e as m}from"./Duq_kkDy.js";import{h as g}from"./vcs5vhYT.js";import{l as j,s as N}from"./BibeY9w6.js";import{B as O}from"./BEEN1jNk.js";import{L as l,e as D,b as E}from"./DgHUaW30.js";import{I as G}from"./DREm_t4h.js";const i={title:"Hsuan's Space 中用到的技术栈",description:"谈谈本站的开发历程",date:"2025-05-25T00:00:00.000Z",author:"Xuancong Meng",tags:["Web","Develop Diary"],layout:"blog"},{title:K,description:R,date:A,author:F,tags:J,layout:Y}=i;var T=z(`<p>关于「我要做一个关于自己的网页」这个 Flag 我已经立了若干年了，最近这段时间终于有动力来完成它。尝试了没有接触过的技术，花了近半个月的时间，完成了网页的搭建。</p> <p><!> <em>Time in this web project over all time</em></p> <p>本站采用了现代化的 Web 开发技术栈，主要包括：SvelteKit、TailwindCSS、MDsveX 和 Skeleton UI.</p> <h2 id="1-字体"><a class="anchor-link not-prose" href="#1-字体">1. 字体</a></h2> <p>正文部分使用 <a href="https://github.com/lxgw/LxgwWenKai" rel="nofollow">霞鹜文楷</a>。</p> <h4 id="其余字体"><a class="anchor-link not-prose" href="#其余字体">其余字体</a></h4> <ul><li>Noto Serif SC Variable</li> <li>Noto Sans SC Variable</li> <li>Caveat Variable</li> <li>Gravitas One</li></ul> <p>值得注意的是，本网站使用了<a href="https://chinese-font.netlify.app/zh-cn/online-split/" rel="nofollow">字体分包</a>技术，由<a href="https://chinese-font.netlify.app/zh-cn/" rel="nofollow">中文网字计划</a>支持。因此在初次访问网站时，字体会有很独特的加载顺序。</p> <h2 id="2-动画"><a class="anchor-link not-prose" href="#2-动画">2. 动画</a></h2> <h3 id="可变字体动画"><a class="anchor-link not-prose" href="#可变字体动画">可变字体动画</a></h3> <p>使用自己做的另外一款组件<a href="https://github.com/QuarkPixel/svelte-text-animation" rel="nofollow"><code>svelte-text-animation</code></a>，这款组件的开发是在网页的开发过程中想到的灵感，就花了差不多一个下午的时间来实现。整体效果还是很惊艳的，用在了首页 Landing
的部分 😆。</p> <p>具体实现的细节其实很是很简单的，使用一个高斯函数叠加上一个边缘递减函数，就可以实现一个平滑的动画效果。</p> <h3 id="logo-动画"><a class="anchor-link not-prose" href="#logo-动画">Logo 动画</a></h3> <p>我尝试了市面上很多的 SVG 动画库，但是要么就是太过臃肿，要么就是实现的效果很奇怪，没法做到我要求的“点对点移动”的效果。于是我心一狠，直接手撕了一个SVG动画引擎。其实实际实现起来，没有想象的那么复杂。这也多亏了
Svelte 大量的内置函数，使用起来体验很不错。</p> <button class="mt-20 mb-3 w-full flex justify-around gap-10 _:h-30 _:w-40"><!> <!> <!></button> <div align="center" class="mb-15 opacity-65 font-gravitas-one">↑ Hover Me ↑</div> <h4 id="核心代码"><a class="anchor-link not-prose" href="#核心代码">核心代码：</a></h4> <pre class="language-typescript"><!></pre> <h3 id="header-的背景噪声图"><a class="anchor-link not-prose" href="#header-的背景噪声图">Header 的背景噪声图</a></h3> <p>具体实现是使用一张噪声纹理图</p> <center><p><img src="/assets/noise-texture.png" alt=""> <em>噪声纹理图</em></p></center> <h5 id="但由于不同屏幕尺寸可能会导致纹理图发糊因此我做了这些工作"><a class="anchor-link not-prose" href="#但由于不同屏幕尺寸可能会导致纹理图发糊因此我做了这些工作">但由于不同屏幕尺寸可能会导致纹理图发糊。因此我做了这些工作：</a></h5> <ul><li>添加属性 <code>image-rendering: pixelated;</code>，具体属性说明参见<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/image-rendering" rel="nofollow">MDN</a></li> <li>动态计算图片展示大小，使得图片可以1:1像素展示在显示器上：</li></ul> <pre class="language-typescript"><!></pre> <h3 id="marquee"><a class="anchor-link not-prose" href="#marquee">Marquee</a></h3> <p>页面内所有的跑马灯效果均使用 <a href="https://github.com/selemondev/svelte-marquee" rel="nofollow"><code>svelte-marquee</code></a> 组件实现</p> <h3 id="markdown-渲染"><a class="anchor-link not-prose" href="#markdown-渲染">Markdown 渲染</a></h3> <p>使用 <a href="https://mdsvex.pngwn.io/" rel="nofollow">MDsvex</a> 实现对 md 的渲染</p> <h2 id="部署和性能"><a class="anchor-link not-prose" href="#部署和性能">部署和性能</a></h2> <p>项目使用 <code>@sveltejs/adapter-static</code> 生成静态网站，通过 GitHub Pages 进行部署。得益于 Svelte 的优秀性能和静态站点生成的特性，网站具有：</p> <ul><li>快速的首屏加载</li> <li>优秀的 SEO 表现</li> <li>简单可靠的部署流程</li></ul> <p>如果你对这个项目感兴趣，可以在 <a href="https://github.com/QuarkPixel/QuarkPixel.github.io" rel="nofollow">GitHub</a> 上查看源代码，项目代码采用 GPLv3 许可证开源。</p>`,1);function V(v,b){const w=j(b,["children","$$slots","$$events","$$legacy"]);let a=L(!0);O(v,N(()=>w,i,{children:(_,q)=>{var u=T(),o=n(M(u),2),y=t(o);G(y,{src:"https://wakatime.com/badge/user/018b19a3-343c-48f6-8ba9-5713e3a014cc/project/e4f1a103-1fe2-4a7b-afe8-35b4df2164b6.svg?style=flat-square",alt:"Wakatime badage"}),h(2),p(o);var s=n(o,26),r=t(s);l(r,{get official(){return c(a)},easing:D});var k=n(r,2);l(k,{get official(){return c(a)}});var S=n(k,2);l(S,{get official(){return c(a)},easing:E}),p(s);var e=n(s,6),x=t(e);g(x,()=>`<code class="language-typescript"><span class="token comment">// Derive interpolated path coordinates</span>
<span class="token keyword">let</span> interpolatedPaths<span class="token operator">:</span> Shape<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">$derived</span><span class="token punctuation">(</span>
	paths<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">=></span>
		path<span class="token punctuation">.</span>initial<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">const</span> end <span class="token operator">=</span> path<span class="token punctuation">.</span>target<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">const</span> x <span class="token operator">=</span> start<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> start<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> path<span class="token punctuation">.</span>tween<span class="token punctuation">.</span>current<span class="token punctuation">;</span>
			<span class="token keyword">const</span> y <span class="token operator">=</span> start<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> start<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> path<span class="token punctuation">.</span>tween<span class="token punctuation">.</span>current<span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Derive SVG path d attributes</span>
<span class="token keyword">let</span> dValues<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">$derived</span><span class="token punctuation">(</span>
	interpolatedPaths<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>points<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">M</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>points<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span> <span class="token operator">=></span> point<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">Z</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),p(e);var d=n(e,12),$=t(d);g($,()=>`<code class="language-typescript"><span class="token keyword">function</span> <span class="token function">calcNoiseSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> dpr <span class="token operator">=</span> window<span class="token punctuation">.</span>devicePixelRatio <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>
	noiseTextureSize <span class="token operator">=</span> <span class="token constant">NOISE_TEXTURE_SIZE</span> <span class="token operator">/</span> dpr<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>browser<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">calcNoiseSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">onMount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> calcNoiseSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> calcNoiseSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),p(d),h(16),m("mouseenter",s,()=>f(a,!1)),m("mouseleave",s,()=>f(a,!0)),P(_,u)},$$slots:{default:!0}}))}const nn=Object.freeze(Object.defineProperty({__proto__:null,default:V,metadata:i},Symbol.toStringTag,{value:"Module"}));export{nn as _};

import fs from 'fs';
import path from 'path';
import type { Plugin, ViteDevServer } from 'vite';
import type { Connect } from 'vite';
import type { ServerResponse, IncomingMessage } from 'http';

// 支持的主题类型
type ThemeType = 'light' | 'dark';

function processThemeCSS(rulesPath: string, themePath: string): string {
    const rules = fs.readFileSync(rulesPath, 'utf-8');
    const theme = fs.readFileSync(themePath, 'utf-8');

    let processedRules = '';
    {
        const themeRegex = /\[data-theme=['"].*?['"]\]\s*{([^}]*)}/g;
        let match;
        while ((match = themeRegex.exec(rules)) !== null) {
            processedRules += `:root {${match[1]}}\n`;
        }
    }

    const css = `/* Auto generated by vite-plugin-giscus-theme */\n${processedRules}\n${theme}`;
    return css;
}

export function giscusThemePlugin(): Plugin {
    return {
        name: 'vite-plugin-giscus-theme',
        configureServer(server: ViteDevServer) {
            // 开发服务器中间件
            server.middlewares.use((req: IncomingMessage, res: ServerResponse, next: Connect.NextFunction) => {
                const themeMatch = req.url?.match(/^\/assets\/giscus\/(light|dark)\.css$/);
                if (themeMatch) {
                    const theme = themeMatch[1] as ThemeType;
                    const cssPath = path.resolve(`src/lib/styles/giscus/${theme}.css`);
                    const skeletonPath = path.resolve('src/lib/styles/skeleton.css');
                    try {
                        const processedCss = processThemeCSS(skeletonPath, cssPath);
                        res.setHeader('Content-Type', 'text/css');
                        res.setHeader('Access-Control-Allow-Origin', 'https://giscus.app');
                        res.setHeader('Access-Control-Allow-Methods', 'GET');
                        res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
                        return res.end(processedCss);
                    } catch (error) {
                        console.error(`Error reading or processing ${theme} theme files:`, error);
                        return next();
                    }
                }
                next();
            });
        },
        generateBundle() {
            // 构建时生成两个主题的 CSS 文件
            const themes: ThemeType[] = ['light', 'dark'];
            const skeletonPath = path.resolve('src/lib/styles/skeleton.css');

            themes.forEach(theme => {
                const cssPath = path.resolve(`src/lib/styles/giscus/${theme}.css`);
                try {
                    const processedCss = processThemeCSS(skeletonPath, cssPath);
                    this.emitFile({
                        type: 'asset',
                        fileName: `assets/giscus/${theme}.css`,
                        source: processedCss
                    });
                } catch (error) {
                    console.error(`Error generating ${theme} theme file:`, error);
                }
            });
        }
    };
} 